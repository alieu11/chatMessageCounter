# -*- coding: utf-8 -*-
"""RomatoMessageCounter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CP2z5MKknNNPcBOnaSqO_-CZCCD6Sxmx
"""

import json
import matplotlib.pyplot as plt
import re

# open all the messages

with open('/content/message_1.json') as x:
  m1 = json.loads(x.read())
with open('/content/message_2.json') as x:
  m2 = json.loads(x.read())
with open('/content/message_3.json') as x:
  m3 = json.loads(x.read())
with open('/content/message_4.json') as x:
  m4 = json.loads(x.read())
with open('/content/message_5.json') as x:
  m5 = json.loads(x.read())
with open('/content/message_6.json') as x:
  m6 = json.loads(x.read())
with open('/content/message_7.json') as x:
  m7 = json.loads(x.read())
with open('/content/message_8.json') as x:
  m8 = json.loads(x.read())
with open('/content/message_9.json') as x:
  m9 = json.loads(x.read())
with open('/content/message_10.json') as x:
  m10 = json.loads(x.read())
with open('/content/message_11.json') as x:
  m11 = json.loads(x.read())
with open('/content/message_12.json') as x:
  m12 = json.loads(x.read())
with open('/content/message_13.json') as x:
  m13 = json.loads(x.read())
with open('/content/message_14.json') as x:
  m14 = json.loads(x.read())
with open('/content/message_15.json') as x:
  m15 = json.loads(x.read())
with open('/content/message_16.json') as x:
  m16 = json.loads(x.read())
with open('/content/message_17.json') as x:
  m17 = json.loads(x.read())
with open('/content/message_18.json') as x:
  m18 = json.loads(x.read())
with open('/content/message_19.json') as x:
  m19 = json.loads(x.read())
with open('/content/message_20.json') as x:
  m20 = json.loads(x.read())
with open('/content/message_21.json') as x:
  m21 = json.loads(x.read())
with open('/content/message_22.json') as x:
  m22 = json.loads(x.read())
with open('/content/message_23.json') as x:
  m23 = json.loads(x.read())

# make an array to hold all the messages
allMessages = [m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17, m18, m19, m20, m21, m22, m23]

def messageCounter():

  # for each participant, count their messages

  """
  NOTE:

  The reason the code is not O(n) is because it chooses the participant first, 
  THEN searches the entire list of messages for the respective sender.
  For O(n), the code should parse through the messages, 
  and for each sender name, iterate the counter.

  Example: 
  message1 has sender1, so add 1 to sender1 counter
  message2 has sender2, so add 1 to sender2 counter
  message3 has sender1, so add 1 to sender1 counter

  This allows for the messages to be read through once, 
  instead of (number of participants) times. This would also allow for
  the possibility of a "timelapse".

  TODO:

  Make this program run in O(n)

  """

  # initialize empty dictionary
  unsortedDict = dict()

  # load all the participants, initialize count = 0
  for i in m1['participants']:
    count = 0

    # go through all the messages
    for j in allMessages:
      # for each message, if sender name matches the participant name, increment count by 1
      for k in j['messages']:
        if k['sender_name'] == i['name']:
          count = count + 1
    #print(i['name'], count)
    # add the name and respective count value to the unsorted dictionary
    tempName = i['name']
    unsortedDict[tempName] = count

  carolName, carolCount = includeCarol(allMessages)
  unsortedDict[carolName] = carolCount

    # sort the dictionary

  # sorts the dictionary by increasing messages
  sortedDict = dict(sorted(unsortedDict.items(), key = lambda item: item[1]))
  # print(sortedDict)

  for keys, values in sortedDict.items():
    print(keys, values)

  return sortedDict

def totalWordsSpoken():
  # initialize empty dictionary
  unsortedDict = dict()

  # load all the participants, initialize count = 0
  for i in m1['participants']:
    count = 0

  # go through all the messages
    for j in allMessages:
      # for each message, if sender name matches the participant name, increment count by 1
      for k in j['messages']:
        if k['sender_name'] == i['name']:
          if 'content' in k:
            #print(k['content'])
            r = re.findall(r'\w+', k['content'])
            count = count + len(r)
    #print(i['name'], count)
    # add the name and respective count value to the unsorted dictionary
    tempName = i['name']
    unsortedDict[tempName] = count

  carolName, carolCount = includeCarolWords()
  unsortedDict[carolName] = carolCount

  # sort the dictionary

  # sorts the dictionary by increasing messages
  sortedDict = dict(sorted(unsortedDict.items(), key = lambda item: item[1]))
  # print(sortedDict)

  for keys, values in sortedDict.items():
    print(keys, values)

  return sortedDict

def messageCounterSeparate(data):

  # initialize empty dictionary
  unsortedDict = dict()

  # load all the participants, initialize count = 0
  for i in data['participants']:
    count = 0

    # go through all the messages
    for j in data:
      # for each message, if sender name matches the participant name, increment count by 1
      for k in data['messages']:
        if k['sender_name'] == i['name']:
          count = count + 1
    #print(i['name'], count)
    # add the name and respective count value to the unsorted dictionary
    tempName = i['name']
    unsortedDict[tempName] = count

  carolName, carolCount = includeCarol(data)
  unsortedDict[carolName] = carolCount

    # sort the dictionary

  # sorts the dictionary by increasing messages
  sortedDict = dict(sorted(unsortedDict.items(), key = lambda item: item[1]))
  # print(sortedDict)

  for keys, values in sortedDict.items():
    print(keys, values)

  return sortedDict

def includeCarol(data):
  count = 0

  # go through all the messages
  for j in data:
    # for each message, if sender name matches the participant name, increment count by 1
    for k in data['messages']:
      if k['sender_name'] == 'Carol Tu':
        count = count + 1

  return 'Carol Tu', count

def includeCarolWords():
  count = 0

  # go through all the messages
  for j in allMessages:
    # for each message, if sender name matches the participant name, increment count by 1
    for k in j['messages']:
      if k['sender_name'] == i['name']:
        if 'content' in k:
          r = re.findall(r'\w+', k['content'])
          count = count + len(r)

  return 'Carol Tu', count

def wordCounter(word):

  unsortedDict = dict()
  totalCount = 0

  # load all the participants, initialize count = 0
  for i in m1['participants']:
    count = 0

    # go through all the messages
    for j in allMessages:
      # for each message, if sender name matches the participant name, increment count by 1
      for k in j['messages']:
        if k['sender_name'] == i['name']:
          if 'content' in k:
            if word in k['content']:
              count = count + 1
              totalCount = totalCount + 1
    #print(i['name'], count)
    #print(i['name'], count)
    # add the name and respective count value to the unsorted dictionary
    tempName = i['name']
    unsortedDict[tempName] = count

    # sort the dictionary

  # sorts the dictionary by increasing messages
  sortedDict = dict(sorted(unsortedDict.items(), key = lambda item: item[1]))
  print("Total: ", totalCount)
  for keys, values in sortedDict.items():
    print(keys, values)

  return sortedDict

def teacupCounter():
  return wordCounter('\u00f0\u009f\u008d\u00b5')


def printBarGraph(dictData):

  data = dictData
  names = list(data.keys())
  values = list(data.values())

  plt.figure(figsize = (15, 10))
  plt.barh(range(len(data)), values, tick_label = names)
  plt.xticks(rotation = 90)

  plt.show()


def printPieChart(dictData):

  data = dictData
  names = list(data.keys())
  values = list(data.values())
  
  fig, ax = plt.subplots()
  ax.pie(values, labels = names, radius = 2, autopct = '%1.1f%%')

data23 = messageCounterSeparate(m23)
printBarGraph(data23)
printPieChart(data23)

data22 = messageCounterSeparate(m22)
printBarGraph(data22)
printPieChart(data22)

data21 = messageCounterSeparate(m21)
printBarGraph(data21)
printPieChart(data21)

data20 = messageCounterSeparate(m20)
printBarGraph(data20)
printPieChart(data20)

data = totalWordsSpoken()
printBarGraph(data)
printPieChart(data)

# initialize empty dictionary
unsortedDict = dict()

# load all the participants, initialize count = 0
for i in m1['participants']:
  count = 0

  # go through all the messages
  for j in allMessages:
    # for each message, if sender name matches the participant name, increment count by 1
    for k in j['messages']:
      if k['sender_name'] == i['name']:
        if 'content' in k:
          #print(k['content'])
          r = re.findall(r'\w+', k['content'])
          count = count + len(r)
  #print(i['name'], count)
  # add the name and respective count value to the unsorted dictionary
  tempName = i['name']
  unsortedDict[tempName] = count

carolName, carolCount = includeCarolWords()
unsortedDict[carolName] = carolCount

  # sort the dictionary

# sorts the dictionary by increasing messages
sortedDict = dict(sorted(unsortedDict.items(), key = lambda item: item[1]))
# print(sortedDict)

for keys, values in sortedDict.items():
  print(keys, values)